@page "/skillz"
@using SkillzMatrix.Shared.Models
@using SkillzMatrix.Services
@inject SkillzService skillzService
@inject IJSRuntime js

<h1>Skillz</h1>

@if (skillz == null)
{
  <Spinner></Spinner>
}
else
{
    <div class="row">
        <div class="col-md-12">
            Filter by name:
        </div>
        <div class="col-md-12 mb-3">
            <input type="text" @bind-value="@skillzName" @bind-value:event="oninput" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-5">
            <table class="table table-hover table-striped fixed-table-body">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var skill in skillz.Where(x => x.Name.ToLower().Contains(skillzName.ToLower())).OrderByDescending(x => x.Name))
                    {
                        <tr>
                            <td>@skill.Name</td>
                            <td>@skill.Description</td>
                            <td><button id="deleteSkill" type="button" @onclick="(()=> DeleteSkill(skill.ID))" class="btn btn-outline-dark">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <button id="popupButton" type="button" @onclick="ShowPopup" class="btn btn-outline-dark">Add skill</button>
    @if (showPopup)
    {
        <EditForm Model="@AddSkillModel" OnValidSubmit="@AddSkill">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-md-12 mt-2">Name:</div>
                <div class="col-md-12">
                    <InputText id="name" @bind-Value="@AddSkillModel.Name" />
                </div>
                <div class="col-md-12">Description:</div>
                <div class="col-md-12 mb-2">
                    <InputText id="description" @bind-Value="@AddSkillModel.Description" />
                </div>
                <div class="col-md-12 mb-2">
                    <button id="AddSkillBtn" type="submit" class="btn btn-outline-dark">Add</button>
                </div>
            </div>
        </EditForm>
    }
}

@code {
    List<SkillzModel> skillz;
    private SkillzModel AddSkillModel = new SkillzModel();
    bool showPopup = false;
    string skillzName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        skillz = await skillzService.GetAllSkillzAsync();
    }

    void ShowPopup()
    {
        showPopup = !showPopup;
    }

    async Task AddSkill()
    {
        if (AddSkillModel.ID == 0)
        {
            var skillToAdd = AddSkillModel;
            skillzService.AddSkillAsync(AddSkillModel);
            //TODO: add only created object?
            skillz = await skillzService.GetAllSkillzAsync();
        }

        showPopup = false;
        AddSkillModel = new SkillzModel();
    }
    async Task DeleteSkill(int id)
    {
        var skill = skillz.FirstOrDefault(x=>x.ID == id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {skill.Name}?"))
        {
            skillzService.DeleteSkillAsync(id);
            skillz = await skillzService.GetAllSkillzAsync();
        }

    }
}
